analytic

# disney_diffuse.brdf
# Disney diffuse brdf shader for Disney BRDF Explorer.
#
# AUTHOR: Gregory Igehy

# variables go here...
# [type] [name] [min val] [max val] [default val]
::begin parameters
color base_color 1.0 1.0 1.0
float roughness  0 1     0.5
::end parameters

::begin shader

const float INV_MATH_PI = 0.31830988618379067153776752674503;

float fresnel( float dot_value )
{
    return pow( 1.0 - dot_value, 5.0 );
}

// "Extending the Disney BRDF to a BSDF with Integrated Subsurface Scattering" SIGGRAPH 2015
vec3 DisneyDiffuse( float dot_n_l, float dot_n_v, float dot_l_h,
                    vec3 diffuse_color, float roughness )
{
    float f_l = fresnel( dot_n_l );
    float f_v = fresnel( dot_n_v );
    float r_r = 2 * dot_l_h * dot_l_h * roughness;

    vec3 lambert_brdf =
        ( INV_MATH_PI * ( 1.0 - 0.5 * f_l ) * ( 1.0 - 0.5 * f_v ) ) * diffuse_color;

    vec3 retro_brdf =
        ( INV_MATH_PI * r_r * ( f_l + f_v + f_l * f_v * ( r_r - 1.0 ) ) ) * diffuse_color;

    return lambert_brdf + retro_brdf;
}

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{
    vec3  H               = normalize(L + V);
    float dot_n_l         = max( dot( N, L ), 0.0 );
    float dot_n_v         = max( dot( N, V ), 1e-5 );
    float dot_l_h         = max( dot( L, H ), 0.0 );

    const float metallic  = 0.0;
    vec3 diffuse_color    = base_color * ( 1.0 - metallic );

    vec3 diffuse_brdf     = DisneyDiffuse( dot_n_l, dot_n_v, dot_l_h,
                                           diffuse_color, roughness );
    diffuse_brdf         *= ( dot_n_l > 0.0 ) ? 1.0 : 0.0;

    vec3 final_brdf       = diffuse_brdf;

    return final_brdf;
}

::end shader
