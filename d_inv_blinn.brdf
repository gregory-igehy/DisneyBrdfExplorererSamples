analytic

# variables go here...
# only floats supported right now.
# [type] [name] [min val] [max val] [default val]

::begin parameters
float roughness 0.0001 1.0 0.1
::end parameters

# Then comes the shader. This should be GLSL code
# that defines a function called BRDF (although you can
# add whatever else you want too, like sqr() below).

::begin shader

const float MATH_PI		= 3.14159265358979323846;
const float INV_MATH_PI = 1.0 / MATH_PI;

float invBlinn( float roughness, float dot_n_h )
{
	const float A = 4.0;

	float alpha	  = roughness * roughness;
	float alpha_2 = alpha * alpha;
	float cos_h_2 = dot_n_h * dot_n_h;
	float sin_h_2 = 1.0 - cos_h_2;

	float term0   = 1.0 + A * alpha_2;
	float term1   = 1.0 + A * exp( - cos_h_2 / alpha_2 );

	return INV_MATH_PI * term1 / term0;
}

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{
    vec3 H		   = normalize( L + V );
	float dot_n_h  = max( dot( N, H ), 0.0 );

    float D		   = invBlinn( roughness, dot_n_h );
	D			  *= dot( N, L ) > 0.0 ? 1.0 : 0.0;

    return vec3(D);
}

::end shader
