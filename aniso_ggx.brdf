analytic

# Copyright Disney Enterprises, Inc.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License
# and the following modification to it: Section 6 Trademarks.
# deleted and replaced with:
#
# 6. Trademarks. This License does not grant permission to use the
# trade names, trademarks, service marks, or product names of the
# Licensor and its affiliates, except as required for reproducing
# the content of the NOTICE file.
#
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0

# variables go here...
# only floats supported right now.
# [type] [name] [min val] [max val] [default val]

::begin parameters
color baseColor  1.0 .0 .0
float metallic    0    1 0
float roughness    0.001 1 0.2
float anisotropic  0     1 0.9
float specularTint 0 1 0
::end parameters

# Then comes the shader. This should be GLSL code
# that defines a function called BRDF (although you can
# add whatever else you want too, like sqr() below).
    
::begin shader

const float PI = 3.14159265358979323846;

float sqr(float x) { return x*x; }

float SchlickFresnel(float u)
{
    float m  = clamp(1-u, 0, 1);
    float m2 = m*m;
    return m2*m2*m; // pow(m,5)
}

float GTR2_aniso(float NdotH, float HdotX, float HdotY, float ax, float ay)
{
    return 1 / ( PI * ax*ay * sqr( sqr(HdotX/ax) + sqr(HdotY/ay) + NdotH*NdotH ));
}

vec3 mon2lin(vec3 x)
{
    return vec3(pow(x[0], 2.2), pow(x[1], 2.2), pow(x[2], 2.2));
}

float g1( float dot_n_w, float k)
{
    return 1.0 / ( dot_n_w * ( 1.0 - k ) + k );
}

float v_shlick_ggx( float alpha, float dot_n_l, float dot_n_v )
{
    float k = 0.5 * alpha;
    return g1( dot_n_l, k ) * g1( dot_n_v, k );
}

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{
    vec3 H                  = normalize( L + V );

    float dot_n_l           = max( dot( N, L ), 0.0 );
    float dot_l_h           = max( dot( L, H ), 0.0 );
    float dot_n_h           = max( dot( N, H ), 0.0 );
    float dot_n_v           = max( dot( N, V ), 1e-5 );

    float alpha             = roughness * roughness;


    float aspect            = sqrt(1.0 - 0.9 * anisotropic );
    float ax                = max( 0.001, alpha / aspect);
    float ay                = max( 0.001, alpha * aspect);
    //float ax                = alpha;
    //float ay                = mix( 0.0, alpha, 1.0 - anisotropic );

    // D
    float specular_d        = GTR2_aniso( dot_n_h, dot(H, X), dot(H, Y), ax, ay);

    // F
    vec3  Cdlin             = mon2lin(baseColor);
    float Cdlum             = .3*Cdlin[0] + .6*Cdlin[1]  + .1*Cdlin[2]; // luminance approx.
    vec3 Ctint              = Cdlum > 0 ? Cdlin/Cdlum : vec3(1); // normalize lum. to isolate hue+sat
    vec3 Cspec0             = mix( 0.08*mix(vec3(1), Ctint, specularTint), Cdlin, metallic);
    float FH                = SchlickFresnel( dot_l_h );
    vec3 specular_f         = mix(Cspec0, vec3(1), FH );

    // V
    float specular_v        = v_shlick_ggx( alpha, dot_n_l, dot_n_v );

    vec3 pbr_specular_brdf  = ( 0.25 * specular_d * specular_v ) * specular_f;
    pbr_specular_brdf      *= ( dot_n_l > 0.0 ) ? 1.0 : 0.0;

    return pbr_specular_brdf;
}

::end shader
