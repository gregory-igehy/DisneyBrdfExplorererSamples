analytic

# kajiya_kay.brdf
# Kajiya-Kay BRDF shader for Disney BRDF Explorer.
#
# AUTHOR: Gregory Igehy
#
# LICENSE:
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
# 
# For more information, please refer to <http://unlicense.org/>

# variables go here...
# only floats supported right now.
# [type] [name] [min val] [max val] [default val]

::begin parameters
color diffuse_color  1.0 0.0 0.0
color specular_color 1.0 1.0 1.0
float n 1 1000 100
# bool normalized 0
::end parameters

# Then comes the shader. This should be GLSL code
# that defines a function called BRDF (although you can
# add whatever else you want too, like sqr() below).

::begin shader

const float PI     = 3.14159265358979323846;
const float INV_PI = 1.0 / PI;

vec3 KajiyaKayDiffuseBrdf( float cos_theta_l )
{
    float c_norm = INV_PI;
    return ( c_norm * cos_theta_l ) * diffuse_color;
}

vec3 KajiyaKaySpeclarBrdf( float cos_theta_l, float cos_theta_v,
                           float dot_l_t    , float dot_v_t,
                           float alpha_pow )
{
    // float c_norm = normalized ? ( ( 2 + alpha_pow ) / ( 2 * PI ) ) : 1.0;

    float value  = max( cos_theta_l * cos_theta_v - dot_l_t * dot_v_t, 0.0 );
    value        = pow( value, alpha_pow );

    return value * specular_color;
}

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{
    vec3 T            = Y;
    float alpha_pow   = n;

    float dot_l_t     = dot( L, T );
    float m_dot_l_t_2 = 1.0 - dot_l_t * dot_l_t;
    float cos_theta_l = m_dot_l_t_2 > 0.0 ? sqrt( m_dot_l_t_2 ) : 0.0;

    vec3 diffuse_brdf = KajiyaKayDiffuseBrdf( cos_theta_l );

    float dot_v_t     = dot( V, T );
    float m_dot_v_t_2 = 1.0 - dot_v_t * dot_v_t;
    float cos_theta_v = m_dot_v_t_2 > 0.0 ? sqrt( m_dot_v_t_2 ) : 0.0;

    vec3 specular_brdf =
        KajiyaKaySpeclarBrdf( cos_theta_l, cos_theta_v,
                              dot_l_t    , dot_v_t,
                              alpha_pow );

    vec3 brdf  = diffuse_brdf + specular_brdf;
    brdf      *= ( dot( L, N ) > 0.0 ) ? 1.0 : 0.0;

    return brdf;
}

::end shader
