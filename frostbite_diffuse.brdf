analytic

# frostbite_diffuse.brdf
# FrostBite diffuse brdf shader for Disney BRDF Explorer.
#
# AUTHOR: Gregory Igehy

# variables go here...
# [type] [name] [min val] [max val] [default val]
::begin parameters
color base_color 1.0 1.0 1.0
float metallic    0     1  0
float roughness   0.01  1  0.05
::end parameters

::begin shader

const float INV_MATH_PI            = 0.31830988618379067153776752674503;

// "Moving Frostbite to Physically Based Rendering 2.0" SIGGRAPH 2014
float F_Schlick(float f0, float f90 , float u)
{
    return f0 + ( f90 - f0 ) * pow(1.0f - u, 5.0f);
}

// "Moving Frostbite to Physically Based Rendering 2.0" SIGGRAPH 2014
float Fr_DisneyDiffuse( float NdotV, float NdotL, 
                        float LdotH, float linearRoughness )
{
    float energyBias   = mix( 0.0, 0.5, linearRoughness );

    float energyFactor = mix( 1.0, 1.0 / 1.51, linearRoughness );
    float fd90         = energyBias + 2.0 * LdotH * LdotH * linearRoughness;

    float f0           = 1.0f;
    float lightScatter = F_Schlick(f0, fd90 , NdotL );
    float viewScatter  = F_Schlick(f0, fd90 , NdotV );

    return lightScatter * viewScatter * energyFactor ;
}

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{
    vec3  H               = normalize(L + V);
    float dot_n_l         = max( dot( N, L ), 0.0 );
    float dot_l_h         = max( dot( L, H ), 0.0 );
    float dot_n_h         = max( dot( N, H ), 0.0 );
    float dot_n_v         = max( dot( N, V ), 1e-5 );

    vec3 diffuse_color    = base_color * ( 1.0 - metallic );
    float Fd              = Fr_DisneyDiffuse( dot_n_v, dot_n_l, dot_l_h, roughness );

    vec3 diffuse_brdf     = ( INV_MATH_PI * Fd ) * diffuse_color;
    diffuse_brdf         *= ( dot_n_l > 0.0 ) ? 1.0 : 0.0;

    vec3 final_brdf       = diffuse_brdf;

    return final_brdf;
}

::end shader
