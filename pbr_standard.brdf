analytic

# pbr_standard.brdf
# Standard pbr brdf shader for Disney BRDF Explorer.
#
# AUTHOR: Gregory Igehy
#
# LICENSE:
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
# 
# For more information, please refer to <http://unlicense.org/>

# variables go here...
# [type] [name] [min val] [max val] [default val]
::begin parameters
color base_color 1.0 .0 .0
float metallic    0     1  0
float roughness   0.01  1  0.05
::end parameters

::begin shader

const float INV_MATH_PI            = 0.31830988618379067153776752674503;
const vec3  DIELECTRIC_SPECULAR = vec3( 0.04 );


vec3 f_shlick(vec3 f0, float u)
{
    return f0 + ( vec3( 1.0 ) - f0 ) * pow(1-u, 5);
}

float d_GGX(float alpha, float cos_n_h )
{
    float term0 = alpha * INV_MATH_PI;
    float term1 = cos_n_h *  cos_n_h * (alpha - 1 ) + 1.0;
    float term2 = term1 * term1;

    return term0 / term2;
}

float g1( float dot_n_w, float k)
{
    return 1.0 / ( dot_n_w * ( 1.0 - k ) + k );
}

float v_shlick_ggx( float alpha, float dot_n_l, float dot_n_v )
{
    float k = 0.5 * alpha;
    return g1( dot_n_l, k ) * g1( dot_n_v, k );
}

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{
    vec3  H               = normalize(L + V);
    float dot_n_l         = max( dot( N, L ), 0.0 );
    float dot_l_h         = max( dot( L, H ), 0.0 );
    float dot_n_h         = max( dot( N, H ), 0.0 );
    float dot_n_v         = max( dot( N, V ), 1e-5 );

    float alpha           = roughness * roughness;

    vec3 diffuse_color    = base_color * ( 1.0 - metallic );
    vec3 diffuse_brdf     = INV_MATH_PI * diffuse_color;
    diffuse_brdf         *= ( dot_n_l > 0.0 ) ? 1.0 : 0.0;
    
    vec3 specular_color   = mix( DIELECTRIC_SPECULAR, base_color, vec3( metallic ) );
    vec3 f_term           = f_shlick( specular_color, dot_l_h );
    float d_term          = d_GGX( alpha, dot_n_h );
    float g_term          = v_shlick_ggx( alpha, dot_n_l, dot_n_v );
    vec3 specular_brdf    = ( 0.25 * d_term * g_term ) * f_term;
    specular_brdf        *= ( dot_n_l > 0.0 ) ? 1.0 : 0.0;

    vec3 final_brdf       = ( diffuse_brdf + specular_brdf );

    return final_brdf;
}

::end shader
